##############################################################################
Write a function that, given a decimal number represented as an array, increments it. For instance, if the input is [2,7,8,9] (representing 2789), the output should be [2,7,9,0] (representing 2790). The array may be arbitrarily long, anything from 1 to millions of digits.


int[] incrementArrayInteger(int list[], int size){
	int result[size] = list;


	if (list[size - 1] != 9){
		result[size - 1] = list[size - 1]++;
	}
	else{
		if (size == 0){
			int longer[size + 1];


			for(int i = 1; i < size; ++i){
				longer[i] = 
			}
		}
		result = incrementArrayInteger(list, size - 1);
	}


	return result;
}


Void increment(std::vector<int> & list){
	for (int i = list.size() - 1; i >= 0; --i){
		If (list.at(i) != 9){
			list.at(i)++;
			Break;
		}


		list.at(i) = 0;
		If (i == 0){
			list.push_front(1);
		}


	}
}


Bool testIncrement(){
	std::vector<int> testVector = {2, 7, 8, 9};
	std::vector<int> expectedVector = {2, 7, 9, 0};
	increment(testVector);


	Bool result = true;


	For (int i = 0; i < testVector.size(); ++i){
		If (testVector.at(i) != expectedVector.at(i))
			Result = false;
	}


	result;
}


2789, 2790
0, 1
999, 1000
2777, 2778
